@use '@angular/material' as mat;

/// Source mixin
@mixin make-container($padding-x: $container-padding-x) {
    width: 100%;
    padding-right: $padding-x;
    padding-left: $padding-x;
    margin-right: auto;
    margin-left: auto;
}

$custom-container-padding-x-xs: 5px;
$custom-container-padding-x-sm: 20px;
$custom-container-padding-x-md: 40px;
$custom-container-padding-x-lg: 60px;

$screen-sm-min: 768px;
$screen-md-min: 992px;
$screen-lg-min: 1200px;
$screen-xs-max: $screen-sm-min - 1;

@media screen and (max-width: $screen-xs-max) {
    .custom-container {
        @include make-container($custom-container-padding-x-xs);
    }
}
@media screen and (min-width: $screen-sm-min) {
    .custom-container {
        @include make-container($custom-container-padding-x-sm);
    }
}
@media screen and (min-width: $screen-md-min) {
    .custom-container {
        @include make-container($custom-container-padding-x-md);
    }
}
@media screen and (min-width: $screen-lg-min) {
    .custom-container {
        @include make-container($custom-container-padding-x-lg);
    }
}

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }


$indigo-default: #3F51B5;
$indigo-light: #C5CAE9;
$indigo-dark: #303F9F;

$orange-default: #FFAB40;
$orange-light: #FFD180;
$orange-dark: #FF9100;

@include mat.core();

$my-primary: mat.define-palette(mat.$indigo-palette, 500, A100, 700);
$my-accent: mat.define-palette(mat.$orange-palette, A200, A100, A400);

// The "warn" palette is optional and defaults to red if not specified.
$my-warn: mat.define-palette(mat.$deep-orange-palette);

$my-light-theme: mat.define-light-theme((
 color: (
   primary: $my-primary,
   accent: $my-accent,
   warn: $my-warn,
//    background: $indigo-light
 ),
 typography: mat.define-typography-config(),
 density: 0,
//  background: $indigo-light
));

// Emit theme-dependent styles for common features used across multiple components.
@include mat.core-theme($my-light-theme);

// Emit styles for MatButton based on `$my-light-theme`. Because the configuration
// passed to `define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.button-theme($my-light-theme);

// Include the theme mixins for other components you use here.

@include mat.grid-list-theme($my-light-theme);

// @include mat.expansion-panel-theme($my-light-theme);
// @include mat.accordion-theme($my-light-theme);

body {
    background-image: url("./assets/images/Zid.png");
}


// Toggle style
.toggle {
    --width: 80px;
    --height: calc(var(--width) / 3);

    position: relative;
    display: inline-block;
    width: var(--width);
    height: var(--height);
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.3);
    cursor: pointer;
    border-radius: 8px;
}

.toggle input {
    display: none;
}

.toggle .labels {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    font-size: 12px;
    font-family: sans-serif;
    transition: all 0.4s ease-in-out;
}

.toggle .labels::after {
    content: attr(data-on);
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    color: #ffffff;
    background-color: $indigo-light;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4);
    transition: all 0.4s ease-in-out;
}

.toggle .labels::before {
    content: attr(data-off);
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    color: #4d4d4d;
    background-color: $orange-light;
    text-align: center;
    opacity: 0;
    text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.4);
    transition: all 0.4s ease-in-out;
}

.toggle input:checked~.labels::after {
    /* flip 180deg */
    transform: rotateY(180deg);
    opacity: 0;
}

.toggle input:checked~.labels::before {
    transform: rotateY(180deg) scale(-1, 1);
    opacity: 1;
}

.card-item {
    border-radius: 3.3%;
    max-height: 400px
}
